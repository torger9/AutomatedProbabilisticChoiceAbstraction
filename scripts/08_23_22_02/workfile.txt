Initializing...
	Reading from ../models/toy2.jani
	Writing to 08_23_22_02.jani

	Target variables: [Name(identifier='z')]
	Important variables: [Name(identifier='clk')]

	Initial state: Location(name='loc_1 || loc_1', progress_invariant=None, transient_values=frozenset())

	Initialization complete

Collecting model info...
	Exploring location 1
	Exploring location 2
	Exploring location 3
	Exploring location 4
	4 total locations

	Target locations: 1
		264 bytes
	Back edges: 3
		1408 bytes
	All vars: 4
		664 bytes

	Model info collected

Target location 1 of 1
Evaluating possibilities...
	Recursion depth 0
		Locations solved: 0
		Backwards_vals: - bytes
		Location_value_map: 64 bytes
		Final_vals: - bytes

	Recursion depth 1
		Locations solved: 0
		Backwards_vals: - bytes
		Location_value_map: 64 bytes
		Final_vals: - bytes

	Recursion depth 2
		Locations solved: 0
		Backwards_vals: - bytes
		Location_value_map: 64 bytes
		Final_vals: - bytes

	Recursion depth 1
		Locations solved: 1
		Backwards_vals: 136 bytes
		Location_value_map: 431 bytes
		Final_vals: 56 bytes

		Equality(operator=<EqualityOperator.NEQ: ('≠', <function EqualityOperator.<lambda> at 0x7f3370e94af0>)>, left=Name(identifier='clk'), right=IntegerConstant(integer=3))
	Recursion depth 0
		Locations solved: 2
		Backwards_vals: 408 bytes
		Location_value_map: 902 bytes
		Final_vals: 56 bytes

		Boolean(operator=<BooleanOperator.AND: ('∧', <function BooleanOperator.<lambda> at 0x7f3370e63e20>)>, left=Boolean(operator=<BooleanOperator.AND: ('∧', <function BooleanOperator.<lambda> at 0x7f3370e63e20>)>, left=Comparison(operator=<ComparisonOperator.GE: ('≥', False, <function ComparisonOperator.<lambda> at 0x7f3370e94e50>)>, left=Name(identifier='x'), right=Name(identifier='y')), right=Comparison(operator=<ComparisonOperator.LE: ('≤', False, <function ComparisonOperator.<lambda> at 0x7f3370e94dc0>)>, left=Name(identifier='x'), right=Name(identifier='y'))), right=Equality(operator=<EqualityOperator.NEQ: ('≠', <function EqualityOperator.<lambda> at 0x7f3370e94af0>)>, left=Name(identifier='clk'), right=IntegerConstant(integer=3)))
		Boolean(operator=<BooleanOperator.AND: ('∧', <function BooleanOperator.<lambda> at 0x7f3370e63e20>)>, left=Boolean(operator=<BooleanOperator.AND: ('∧', <function BooleanOperator.<lambda> at 0x7f3370e63e20>)>, left=Comparison(operator=<ComparisonOperator.GE: ('≥', False, <function ComparisonOperator.<lambda> at 0x7f3370e94e50>)>, left=Name(identifier='x'), right=Name(identifier='y')), right=Comparison(operator=<ComparisonOperator.LE: ('≤', False, <function ComparisonOperator.<lambda> at 0x7f3370e94dc0>)>, left=Name(identifier='x'), right=Name(identifier='y'))), right=Equality(operator=<EqualityOperator.NEQ: ('≠', <function EqualityOperator.<lambda> at 0x7f3370e94af0>)>, left=Name(identifier='clk'), right=IntegerConstant(integer=3)))
		Boolean(operator=<BooleanOperator.AND: ('∧', <function BooleanOperator.<lambda> at 0x7f3370e63e20>)>, left=Boolean(operator=<BooleanOperator.AND: ('∧', <function BooleanOperator.<lambda> at 0x7f3370e63e20>)>, left=Comparison(operator=<ComparisonOperator.LT: ('<', True, <function ComparisonOperator.<lambda> at 0x7f3370e94d30>)>, left=Name(identifier='x'), right=Name(identifier='y')), right=Comparison(operator=<ComparisonOperator.LE: ('≤', False, <function ComparisonOperator.<lambda> at 0x7f3370e94dc0>)>, left=Name(identifier='x'), right=Name(identifier='y'))), right=Equality(operator=<EqualityOperator.NEQ: ('≠', <function EqualityOperator.<lambda> at 0x7f3370e94af0>)>, left=Name(identifier='clk'), right=IntegerConstant(integer=3)))
		Boolean(operator=<BooleanOperator.AND: ('∧', <function BooleanOperator.<lambda> at 0x7f3370e63e20>)>, left=Comparison(operator=<ComparisonOperator.GT: ('>', True, <function ComparisonOperator.<lambda> at 0x7f3370e94ee0>)>, left=Name(identifier='x'), right=Name(identifier='y')), right=Equality(operator=<EqualityOperator.NEQ: ('≠', <function EqualityOperator.<lambda> at 0x7f3370e94af0>)>, left=Name(identifier='clk'), right=IntegerConstant(integer=3)))
		Boolean(operator=<BooleanOperator.AND: ('∧', <function BooleanOperator.<lambda> at 0x7f3370e63e20>)>, left=Comparison(operator=<ComparisonOperator.GT: ('>', True, <function ComparisonOperator.<lambda> at 0x7f3370e94ee0>)>, left=Name(identifier='x'), right=Name(identifier='y')), right=Equality(operator=<EqualityOperator.NEQ: ('≠', <function EqualityOperator.<lambda> at 0x7f3370e94af0>)>, left=Name(identifier='clk'), right=IntegerConstant(integer=3)))
		Boolean(operator=<BooleanOperator.AND: ('∧', <function BooleanOperator.<lambda> at 0x7f3370e63e20>)>, left=Comparison(operator=<ComparisonOperator.GT: ('>', True, <function ComparisonOperator.<lambda> at 0x7f3370e94ee0>)>, left=Name(identifier='x'), right=Name(identifier='y')), right=Equality(operator=<EqualityOperator.NEQ: ('≠', <function EqualityOperator.<lambda> at 0x7f3370e94af0>)>, left=Name(identifier='clk'), right=IntegerConstant(integer=3)))
